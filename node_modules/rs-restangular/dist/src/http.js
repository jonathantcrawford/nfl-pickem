"use strict";
var http_1 = require('@angular/http');
require('rxjs/add/operator/map');
function mergeHeaders(headers, defaultHeaders) {
    defaultHeaders = new http_1.Headers(defaultHeaders);
    if (!headers) {
        return defaultHeaders;
    }
    var newHeaders = defaultHeaders;
    headers.forEach(function (values, name) {
        newHeaders.set(name, values);
    });
    return newHeaders;
}
exports.mergeHeaders = mergeHeaders;
function mergeSearch(params, defaultParams) {
    var newParams = new http_1.URLSearchParams();
    newParams.setAll(defaultParams || new http_1.URLSearchParams());
    newParams.setAll(params || new http_1.URLSearchParams());
    return newParams;
}
exports.mergeSearch = mergeSearch;
var RestangularHttp;
(function (RestangularHttp) {
    function interceptResponse(path, operation, url) {
        return function (res, index) {
            return path.config.responseInterceptors.reduce(function (data, intercepor) {
                return intercepor(data, operation, path, url, res);
            }, res.json());
        };
    }
    RestangularHttp.interceptResponse = interceptResponse;
    function makeRequest(operation, path, requestArgs, additionalOptions) {
        var options = new http_1.RequestOptions(requestArgs);
        if (additionalOptions) {
            options = options.merge(additionalOptions);
        }
        options.headers = mergeHeaders(options.headers, path.config.defaultHeaders);
        options.search = mergeSearch(options.search, path.config.defaultParams);
        var request = new http_1.Request(options);
        request.url = path.toString();
        request = path.config.requestInterceptors.reduce(function (req, interceptor) { return interceptor(req, operation, path); }, request);
        return path.config.http.request(request).map(RestangularHttp.interceptResponse(path, operation, request.url));
    }
    RestangularHttp.makeRequest = makeRequest;
    function get(path, options) {
        return RestangularHttp.makeRequest('get', path, {
            body: '',
            method: http_1.RequestMethod.Get
        }, options);
    }
    RestangularHttp.get = get;
    function getList(path, options) {
        return RestangularHttp.makeRequest('getList', path, {
            body: '',
            method: http_1.RequestMethod.Get
        }, options);
    }
    RestangularHttp.getList = getList;
    function post(path, body, options) {
        return RestangularHttp.makeRequest('post', path, {
            body: body,
            method: http_1.RequestMethod.Post
        }, options);
    }
    RestangularHttp.post = post;
    function put(path, body, options) {
        return RestangularHttp.makeRequest('put', path, {
            body: body,
            method: http_1.RequestMethod.Put
        }, options);
    }
    RestangularHttp.put = put;
    function remove(path, options) {
        return RestangularHttp.makeRequest('remove', path, {
            body: '',
            method: http_1.RequestMethod.Delete
        }, options);
    }
    RestangularHttp.remove = remove;
    function patch(path, body, options) {
        return RestangularHttp.makeRequest('patch', path, {
            body: body,
            method: http_1.RequestMethod.Patch
        }, options);
    }
    RestangularHttp.patch = patch;
    function head(path, options) {
        return RestangularHttp.makeRequest('head', path, {
            body: '',
            method: http_1.RequestMethod.Head
        }, options);
    }
    RestangularHttp.head = head;
    function options(path, options) {
        return RestangularHttp.makeRequest('options', path, {
            body: '',
            method: http_1.RequestMethod.Options
        }, options);
    }
    RestangularHttp.options = options;
})(RestangularHttp = exports.RestangularHttp || (exports.RestangularHttp = {}));
//# sourceMappingURL=/home/rodolfosilva/htdocs/outros/restangular/src/http.js.map